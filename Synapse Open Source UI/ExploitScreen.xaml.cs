using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Threading;
using CefSharp;
using CefSharp.Wpf;
using Microsoft.Win32;
using sxlib.Specialized;
using Synapse_X_UI.Properties;
using Application = System.Windows.Application;
using OpenFileDialog = Microsoft.Win32.OpenFileDialog;

namespace Synapse_X_UI
{
    /// <summary>
    /// Interaction logic for ExploitScreen.xaml
    /// </summary>
    public partial class ExploitScreen
    {
        private readonly InterfaceDesign designMethods;
        private readonly BrushConverter brushConverter;
        private readonly DispatcherTimer attachNotify;
        private bool isShowingStatus;
        private string scriptsDirectory;
        public static bool debounce;

        private readonly OpenFileDialog openFileDialog;

        public ExploitScreen()
        {
            Cef.EnableHighDPISupport();
            var settings = new CefSettings();
            settings.SetOffScreenRenderingBestPerformanceArgs();
            Cef.Initialize(settings);

            var SLib = Globals.SxLib;
            SLib.SetWindow(this);
            SLib.AttachEvent += async (SEvent, Param) =>
            {
                switch (SEvent)
                {
                    case SxLibBase.SynAttachEvents.CHECKING:
                    {
                        showStatusLabel();
                        headerStatusLabel.Content = "Checking...";
                        break;
                    }

                    case SxLibBase.SynAttachEvents.INJECTING:
                    {
                        headerStatusLabel.Content = "Injecting...";
                        break;
                    }

                    case SxLibBase.SynAttachEvents.CHECKING_WHITELIST:
                    {
                        headerStatusLabel.Content = "Checking Whitelist...";
                        break;
                    }

                    case SxLibBase.SynAttachEvents.SCANNING:
                    {
                        showStatusLabel();
                        headerStatusLabel.Content = "Scanning...";
                        break;
                    }

                    case SxLibBase.SynAttachEvents.READY:
                    {
                        headerStatusLabel.Content = "Ready!";
                        
                        attachNotify.Stop();
                        designMethods.ButtonColor(attachButton, brushConverter.ConvertToString(attachButton.Background), "#FF3C3C3C");
                        await Task.Delay(1000);
                        hideStatusLabel();
                        break;
                    }

                    case SxLibBase.SynAttachEvents.ALREADY_INJECTED:
                    {
                        error("Already injected!");
                        await Task.Delay(1000);
                        hideStatusLabel();
                        break;
                    }

                    case SxLibBase.SynAttachEvents.FAILED_TO_ATTACH:
                    {
                        error("Failed to attach!");
                        await Task.Delay(1000);
                        hideStatusLabel();
                        break;
                    }

                    case SxLibBase.SynAttachEvents.FAILED_TO_FIND:
                    {
                        error("Failed to find Roblox!");
                        await Task.Delay(1000);
                        hideStatusLabel();
                        break;
                    }

                    case SxLibBase.SynAttachEvents.NOT_RUNNING_LATEST_VER_UPDATING:
                    {
                        headerStatusLabel.Content = "Not running latest version, updating...";
                        break;
                    }

                    case SxLibBase.SynAttachEvents.UPDATING_DLLS:
                    {
                        headerStatusLabel.Content = "Updating DLLs...";
                        break;
                    }

                    case SxLibBase.SynAttachEvents.NOT_UPDATED:
                    {
                        error("Not updated! Please try again in a little while.");
                        await Task.Delay(1000);
                        hideStatusLabel();
                        break;
                    }

                    case SxLibBase.SynAttachEvents.FAILED_TO_UPDATE:
                    {
                        error("Auto-update failed! Please restart Synapse X.");
                        await Task.Delay(1000);
                        hideStatusLabel();
                        break;
                    }

                    case SxLibBase.SynAttachEvents.REINJECTING:
                    {
                        headerStatusLabel.Content = "Update complete, reinjecting...";
                        break;
                    }

                    case SxLibBase.SynAttachEvents.NOT_INJECTED:
                    {
                        error("Not injected!");
                        await Task.Delay(1000);
                        hideStatusLabel();
                        break;
                    }

                    case SxLibBase.SynAttachEvents.PROC_CREATION:
                    {
                        attachNotify.Start();
                        break;
                    }

                    case SxLibBase.SynAttachEvents.PROC_DELETION:
                    {
                        attachNotify.Stop();
                        designMethods.ButtonColor(attachButton, brushConverter.ConvertToString(attachButton.Background), "#FF3C3C3C");
                        await Task.Delay(1000);
                        break;
                    }
                }
            };

            SLib.ScriptHubEvent += Entries =>
            {
                scriptHubButton.Content = "Script Hub";
                ScriptHubScreen scriptHub = new ScriptHubScreen(exploitScreen, Entries);
                scriptHub.Show();
                Focus();
            };

            InitializeComponent();

            Title = Globals.RandomString(Globals.Rnd.Next(10, 32));

            designMethods = new InterfaceDesign();
            new Random();
            brushConverter = new BrushConverter();
            openFileDialog = new OpenFileDialog {Title = "Load Script from File", Filter = "Script files|*.lua;*.txt"};
            attachNotify = new DispatcherTimer {Interval = TimeSpan.FromSeconds(1)};
            attachNotify.Tick += AttachNotify_Tick;

            if (Process.GetProcessesByName("RobloxPlayerBeta").Length != 0)
                attachNotify.Start();

            scriptsDirectory = Path.Combine(Path.Combine(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName), "scripts");

            foreach (var FilePath in Directory.GetFiles(scriptsDirectory))
            {
                synScripts.Items.Add(Path.GetFileName(FilePath));
            }
        }

        private async void error(string message)
        {
            errorLabel.Content = message;
            designMethods.Shift(errorLabel, errorLabel.Margin, new Thickness(10, 10, 0, 0));
            if (!Settings.Default.disableSounds)
            {
                Stream str = Properties.Resources.error;
                System.Media.SoundPlayer snd = new System.Media.SoundPlayer(str);
                snd.Play();
            }
            await Task.Delay(3000);
            designMethods.Shift(errorLabel, errorLabel.Margin, new Thickness(10, -60, 0, 0));
        }

        private void AttachNotify_Tick(object sender, EventArgs e)
        {
            if (brushConverter.ConvertToString(attachButton.Background) == "#FF3C3C3C")
            {
                designMethods.ButtonColor(attachButton, "#FF3C3C3C", "#FF33750B");
            }
            else
            {
                designMethods.ButtonColor(attachButton, "#FF33750B", "#FF3C3C3C");
            }
        }

        // for color spectrum 'x'
        /*private void Dispatcher_Tick(object sender, EventArgs e)
        {
            string hexTo = $"#{rand.Next(0x1000000):X6}";
            Dispatcher.Invoke(() => { designMethods.FontColor(headerLabelX, hexFrom, hexTo); });
            hexFrom = hexTo;
            hexTo = $"#{rand.Next(0x1000000):X6}";
        }*/

        private void Window_MouseDown(object sender, MouseButtonEventArgs e)
        {
            if (e.ChangedButton == MouseButton.Left && !debounce)
            {
                DragMove();
            }
        }

        private void ExploitScreen_OnLoaded(object sender, RoutedEventArgs e)
        {
            foreach (FrameworkElement element in headerGrid.Children)
            {
                if (element.Name != "headerStatusLabel")
                {
                    designMethods.FadeIn(element);
                    designMethods.Shift(element, element.Margin, new Thickness(element.Margin.Left, element.Margin.Top - 10, element.Margin.Right, element.Margin.Bottom + 10));
                }
            }
            foreach (FrameworkElement element in buttonsGrid.Children)
            {
                designMethods.FadeIn(element);
                designMethods.Shift(element, element.Margin, new Thickness(element.Margin.Left, element.Margin.Top - 10, element.Margin.Right, element.Margin.Bottom));
            }
            designMethods.FadeIn(synScripts);
            designMethods.FadeIn(synEditorGrid);
            designMethods.Shift(synScripts, synScripts.Margin, new Thickness(synScripts.Margin.Left, synScripts.Margin.Top - 10, synScripts.Margin.Right, synScripts.Margin.Bottom));
            designMethods.Shift(synEditorGrid, synEditorGrid.Margin, new Thickness(synEditorGrid.Margin.Left, synEditorGrid.Margin.Top - 10, synEditorGrid.Margin.Right, synEditorGrid.Margin.Bottom + 10));
        }

        private void showStatusLabel()
        {
            if (isShowingStatus) return;
            isShowingStatus = true;

            designMethods.FadeIn(headerStatusLabel);
            designMethods.Shift(headerStatusLabel, headerStatusLabel.Margin,
                new Thickness(headerStatusLabel.Margin.Left, headerStatusLabel.Margin.Top - 10,
                    headerStatusLabel.Margin.Right, headerStatusLabel.Margin.Bottom + 10));
        }

        private void hideStatusLabel()
        {
            if (!isShowingStatus) return;
            isShowingStatus = false;

            designMethods.FadeOut(headerStatusLabel);
            designMethods.Shift(headerStatusLabel, headerStatusLabel.Margin,
                new Thickness(headerStatusLabel.Margin.Left, headerStatusLabel.Margin.Top + 10,
                    headerStatusLabel.Margin.Right, headerStatusLabel.Margin.Bottom - 10));
        }

        // INTERFACE METHODS //

        // minimize interface
        private void minimizeButton_Click(object sender, RoutedEventArgs e)
        {
            exploitScreen.WindowState = WindowState.Minimized;
        }

        // shutdown interface
        private void closeButton_Click(object sender, RoutedEventArgs e)
        {
            Environment.Exit(0);
        }
        
        // send execute message to exploit
        private void executeButton_Click(object sender, RoutedEventArgs e)
        {
            Globals.SxLib.Execute(Browser.GetText());
        }

        // clear editor
        private void clearButton_Click(object sender, RoutedEventArgs e)
        {
            Browser.SetText("");
        }

        // load selected file to editor
        private void openButton_Click(object sender, RoutedEventArgs e)
        {
            if (openFileDialog.ShowDialog() == true)
            {
                Browser.SetText(File.ReadAllText(openFileDialog.FileName));
            }
        }

        // send selected file text to exploit
        private void executeFileButton_Click(object sender, RoutedEventArgs e)
        {
            if (openFileDialog.ShowDialog() == true)
            {
                Globals.SxLib.Execute(File.ReadAllText(openFileDialog.FileName));
            }
        }

        // save current script in editor to file
        private void saveFileButton_Click(object sender, RoutedEventArgs e)
        {
            var SaveDialog = new SaveFileDialog { Filter = "Script Files (*.lua, *.txt)|*.lua;*.txt", FileName = "" };

            SaveDialog.FileOk += (o, args) =>
            {
                File.WriteAllText(SaveDialog.FileName, Browser.GetText());
            };

            SaveDialog.ShowDialog();
        }

        // open options
        private void optionsButton_Click(object sender, RoutedEventArgs e)
        {
            if (Application.Current.Windows.Cast<Window>().Any(x => x.GetType() == typeof(OptionsScreen))) return;
            debounce = true;
            OptionsScreen options = new OptionsScreen(exploitScreen);
            options.Show();
            Focus();
        }

        // attempt to attach to roblox and init exploit
        private void attachButton_Click(object sender, RoutedEventArgs e)
        {
            Globals.SxLib.Attach();
        }

        // open script hub
        private void scriptHubButton_Click(object sender, RoutedEventArgs e)
        {
            if (Globals.SxLib.ScriptHub())
            {
                debounce = true;
                scriptHubButton.Content = "Starting...";
            }
        }

        //execute (script tab)
        private void ExecuteItem_Click(object sender, RoutedEventArgs e)
        {
            if (synScripts.SelectedIndex == -1) return;

            try
            {
                var Element = synScripts.Items[synScripts.SelectedIndex].ToString();

                Globals.SxLib.Execute(File.ReadAllText(Path.Combine(scriptsDirectory, Element)));
            }
            catch (Exception)
            {
                MessageBox.Show("Failed to read file. Check if it is accessible.", "Synapse X", MessageBoxButton.OK,
                    MessageBoxImage.Warning);
            }
        }

        //load (script tab)
        private void LoadItem_Click(object sender, RoutedEventArgs e)
        {
            if (synScripts.SelectedIndex == -1) return;

            try
            {
                var Element = synScripts.Items[synScripts.SelectedIndex].ToString();

                Browser.SetText(File.ReadAllText(Path.Combine(scriptsDirectory, Element)));
            }
            catch (Exception)
            {
                MessageBox.Show("Failed to read file. Check if it is accessible.", "Synapse X", MessageBoxButton.OK,
                    MessageBoxImage.Warning);
            }
        }
        
        //refresh (script tab)
        private void RefreshItem_Click(object sender, RoutedEventArgs e)
        {
            synScripts.Items.Clear();

            foreach (var FilePath in Directory.GetFiles(scriptsDirectory))
            {
                synScripts.Items.Add(Path.GetFileName(FilePath));
            }
        }

        // MISC METHODS //

        // is run when synapse is no longer attached to roblox (awaiting injection)
        // begins looping flashing green
        private void attachLost()
        {
            attachNotify.Start();
        }

        private async void Browser_MonacoReady()
        {
            Browser.SetTheme(MonacoTheme.Dark);
            Browser.SetText("");

            /* Intellisense */

            var KeywordsControlFlow = new List<string>
            {
                "and", "do", "elseif",
                "for", "function", "if",
                "in", "local", "not", "or",
                "then", "until", "while"
            };

            var KeywordsValue = new List<string>
            {
                "_G", "shared", "true", "false", "nil", "end",
                "break", "else", "repeat", "then", "return"
            };

            var IntellisenseNoDocs = new List<string>
            {
                "error", "getfenv", "getmetatable",
                "newproxy", "next", "pairs",
                "pcall", "print", "rawequal", "rawget", "rawset", "select", "setfenv",
                "tonumber", "tostring", "type", "unpack", "xpcall", "_G",
                "shared", "delay", "require", "spawn", "tick", "typeof", "wait", "warn",
                "game", "Enum", "script", "workspace"
            };

            foreach (var Key in KeywordsControlFlow)
            {
                Browser.AddIntellisense(Key, "Keyword", "", Key + " ");
            }

            foreach (var Key in KeywordsValue)
            {
                Browser.AddIntellisense(Key, "Keyword", "", Key);
            }

            foreach (var Key in IntellisenseNoDocs)
            {
                Browser.AddIntellisense(Key, "Method", "", Key);
            }

            Browser.AddIntellisense("hookfunction(<function> old, <function> hook)", "Method",
                "Hooks function 'old', replacing it with the function 'hook'. The old function is returned, you must use it to call the function further.",
                "hookfunction");
            Browser.AddIntellisense("getgenv(<void>)", "Method",
                "Returns the environment that will be applied to each script ran by Synapse.",
                "getgenv");
            Browser.AddIntellisense("keyrelease(<int> key)", "Method",
                "Releases 'key' on the keyboard. You can access the int key values on MSDN.",
                "keyrelease");
            Browser.AddIntellisense("setclipboard(<string> value)", "Method",
                "Sets 'value' to the clipboard.",
                "setclipboard");
            Browser.AddIntellisense("mouse2press(<void>)", "Method",
                "Clicks down on the right mouse button.",
                "mouse2press");
            Browser.AddIntellisense("getsenv(<LocalScript, ModuleScript> Script)", "Method",
                "Returns the environment of Script. Returns nil if the script is not running.",
                "getsenv");
            Browser.AddIntellisense("checkcaller(<void>)", "Method",
                "Returns true if the current thread was made by Synapse. Useful for metatable hooks.",
                "checkcaller");

            Browser.AddIntellisense("bit", "Class", "Bit Library", "bit");
            Browser.AddIntellisense("bit.bdiv(<uint> dividend, <uint> divisor)", "Method",
                "Divides 'dividend' by 'divisor', remainder is not returned.",
                "bit.bdiv");
            Browser.AddIntellisense("bit.badd(<uint> a, <uint> b)", "Method",
                "Adds 'a' with 'b', allows overflows (unlike normal Lua).",
                "bit.badd");
            Browser.AddIntellisense("bit.bsub(<uint> a, <uint> b)", "Method",
                "Subtracts 'a' with 'b', allows overflows (unlike normal Lua).",
                "bit.badd");
            Browser.AddIntellisense("bit.rshift(<uint> val, <uint> by)", "Method",
                "Does a right shift on 'val' using 'by'.",
                "bit.rshift");
            Browser.AddIntellisense("bit.band(<uint> val, <uint> by)", "Method",
                "Does a logical AND (&) on 'val' using 'by'.",
                "bit.band");
            Browser.AddIntellisense("bit.bor(<uint> val, <uint> by)", "Method",
                "Does a logical OR (|) on 'val' using 'by'.",
                "bit.bor");
            Browser.AddIntellisense("bit.bxor(<uint> val, <uint> by)", "Method",
                "Does a logical XOR (^) on 'val' using 'by'.",
                "bit.bxor");
            Browser.AddIntellisense("bit.bnot(<uint> val)", "Method",
                "Does a logical NOT on 'val'.",
                "bit.bnot");
            Browser.AddIntellisense("bit.bmul(<uint> val, <uint> by)", "Method",
                "Multiplies 'val' using 'by', allows overflows (unlike normal Lua)",
                "bit.bmul");
            Browser.AddIntellisense("bit.bswap(<uint> val)", "Method",
                "Does a bitwise swap on 'val'.",
                "bit.bswap");
            Browser.AddIntellisense("bit.tobit(<uint> val)", "Method",
                "Converts 'val' into proper form for bitwise operations.",
                "bit.tobit");
            Browser.AddIntellisense("bit.ror(<uint> val, <uint> by)", "Method",
                "Rotates right 'val' using 'by'.",
                "bit.ror");
            Browser.AddIntellisense("bit.lshift(<uint> val, <uint> by)", "Method",
                "Does a left shift on 'val' using 'by'.",
                "bit.lshift");
            Browser.AddIntellisense("bit.tohex(<uint> val)", "Method",
                "Converts 'val' to a hex string.",
                "bit.tohex");

            Browser.AddIntellisense("debug", "Class", "Debug Library", "debug");
            Browser.AddIntellisense("debug.getconstant(<function, int> fi, <int> idx)", "Method", "Returns the constant at index 'idx' in function 'fi' or level 'fi'.", "debug.getconstant");
            Browser.AddIntellisense("debug.profilebegin(<string> label>", "Method", "Opens a microprofiler label.", "debug.profilebegin");
            Browser.AddIntellisense("debug.profileend(<void>)", "Method", "Closes the top microprofiler label.", "debug.profileend");
            Browser.AddIntellisense("debug.traceback(<void>)", "Method", "Returns a traceback of the current stack as a string.", "debug.traceback");
            Browser.AddIntellisense("debug.getfenv(<T> o)", "Method", "Returns the environment of object 'o'.", "debug.getfenv");
            Browser.AddIntellisense("debug.getupvalue(<function, int> fi, <string> upval)", "Method", "Returns the upvalue with name 'upval' in function or level 'fi'.", "debug.getupvalue");
            Browser.AddIntellisense("debug.getlocals(<int> lvl)", "Method", "Returns a table containing the upvalues at level 'lvl'.", "debug.getlocals");
            Browser.AddIntellisense("debug.setmetatable(<T> o, <table> mt)", "Method", "Set the metatable of 'o' to 'mt'.", "debug.setmetatable");
            Browser.AddIntellisense("debug.getconstants(<function, int> fi)", "Method", "Retrieve the constants in function 'fi' or at level 'fi'.", "debug.getconstants");
            Browser.AddIntellisense("debug.getupvalues(<function, int> fi)", "Method", "Retrieve the upvalues in function 'fi' or at level 'fi'.", "debug.getupvalues");
            Browser.AddIntellisense("debug.setlocal(<int> lvl, <string> localname, <T> value)", "Method", "Set local 'localname' to value 'value' at level 'lvl'.", "debug.setlocal");
            Browser.AddIntellisense("debug.setupvalue(<function, int> fi, <string> upvname, <T> value)", "Method", "Set upvalue 'upvname' to value 'value' at level or function 'fi'.", "debug.setupvalue");
            Browser.AddIntellisense("debug.setconstant(<function, int> fi, <string> consname, <int, bool, nil, string> value)", "Method", "Set constant 'consname' to tuple 'value' at level or function 'fi'.", "debug.setupvalue");
            Browser.AddIntellisense("debug.getregistry(<void>)", "Method", "Returns the registry", "debug.getregistry");
            Browser.AddIntellisense("debug.getinfo(<function, int> fi, <string> w)", "Method", "Returns a table of info pertaining to the Lua function 'fi'.", "debug.getinfo");
            Browser.AddIntellisense("debug.getlocal(<int> lvl, <string> localname)", "Method", "Returns the local with name 'localname' in level 'lvl'.", "debug.getlocal");

            Browser.AddIntellisense("loadfile(<string> path)", "Method", "Loads in the contents of a file as a chunk and returns it if compilation is successful. Otherwise, if an error has occured during compilation, nil followed by the error message will be returned.", "loadfile");
            Browser.AddIntellisense("loadstring(<string> chunk, [<string> chunkname])", "Method", "Loads 'chunk' as a Lua function and returns it if compilation is succesful. Otherwise, if an error has occured during compilation, nil followed by the error message will be returned.", "loadstring");
            Browser.AddIntellisense("writefile(<string> filepath, <string> contents)", "Method", "Writes 'contents' to the supplied filepath.", "writefile");
            Browser.AddIntellisense("mousescroll(<signed int> px)", "Method", "Scrolls the mouse wheel virtually by 'px' pixels.", "mousescroll");
            Browser.AddIntellisense("mouse2click(<void>)", "Method", "Virtually presses the right mouse button.", "mouse2click");
            Browser.AddIntellisense("islclosure(<function> f)", "Method", "Returns true if 'f' is an LClosure", "islclosure");
            Browser.AddIntellisense("mouse1press(<void>)", "Method", "Simulates a left mouse button press without releasing it.", "mouse1press");
            Browser.AddIntellisense("mouse1release(<void>)", "Method", "Simulates a left mouse button release.", "mouse1release");
            Browser.AddIntellisense("keypress(<int> keycode)", "Method", "Simulates a key press for the specified keycode. For more information: https://docs.microsoft.com/en-us/windows/desktop/inputdev/virtual-key-codes", "keypress");
            Browser.AddIntellisense("mouse2release(<void>)", "Method", "Simulates a right mouse button release.", "mouse2release");
            Browser.AddIntellisense("newcclosure(<function> f)", "Method", "Pushes a new c closure that invokes function 'f' upon call. Used for metatable hooks.", "newcclosure");
            Browser.AddIntellisense("getinstances(<void>)", "Method", "Returns a list of all instances within the game.", "getinstances");
            Browser.AddIntellisense("getnilinstances(<void>)", "Method", "Returns a list of all instances parented to nil within the game.", "getnilinstances");
            Browser.AddIntellisense("readfile(<string> path)", "Method", "Reads the contents of the file located at 'path' and returns it. If the file does not exist, it errors.", "readfile");
            Browser.AddIntellisense("getscripts(<void>)", "Method", "Returns a list of all scripts within the game.", "getscripts");
            Browser.AddIntellisense("getrunningscripts(<void>)", "Method", "Returns a list of all scripts currently running.", "getrunningscripts");
            Browser.AddIntellisense("appendfile(<string> path, <string> content)", "Method", "Appends 'content' to the file contents at 'path'. If the file does not exist, it errors", "appendfile");
            Browser.AddIntellisense("listfiles(<string> folder)", "Method", "Returns a table of files in 'folder'.", "listfiles");
            Browser.AddIntellisense("isfile(<string> path)", "Method", "Returns if 'path' is a file or not.", "isfile");
            Browser.AddIntellisense("isfolder(<string> path)", "Method", "Returns if 'path' is a folder or not.", "isfolder");
            Browser.AddIntellisense("delfolder(<string> path)", "Method", "Deletes 'folder' in the workspace directory.", "delfolder");
            Browser.AddIntellisense("delfile(<string> path)", "Method", "Deletes 'file' from the workspace directory.", "delfile");
            Browser.AddIntellisense("getreg(<void>)", "Method", "Returns the Lua registry.", "getreg");
            Browser.AddIntellisense("getgc(<void>)", "Method", "Returns a copy of the Lua GC list.", "getgc");
            Browser.AddIntellisense("mouse1click(<void>)", "Method", "Simulates a full left mouse button press.", "mouse1click");
            Browser.AddIntellisense("getrawmetatable(<T> value)", "Method", "Retrieve the metatable of value irregardless of value's metatable's __metatable field. Returns nil if it doesn't exist.", "getrawmetatable");
            Browser.AddIntellisense("setreadonly(<table> table, <bool> ro)", "Method", "Sets table's read-only value to ro", "setreadonly");
            Browser.AddIntellisense("isreadonly(<table> table)", "Method", "Returns table's read-only condition.", "isreadonly");
            Browser.AddIntellisense("getrenv(<void>)", "Method", "Returns the global Roblox environment for the LocalScript state.", "getrenv");
            Browser.AddIntellisense("decompile(<LocalScript, ModuleScript, function> Script, bool Bytecode = false)", "Method", "Decompiles Script and returns the decompiled script. If the decompilation fails, then the return value will be an error message.", "decompile");
            Browser.AddIntellisense("dumpstring(<string> Script)", "Method", "Returns the Roblox formatted bytecode for source string 'Script'.", "dumpstring");
            Browser.AddIntellisense("getloadedmodules(<void>)", "Method", "Returns all ModuleScripts loaded in the game.", "getloadedmodules");
            Browser.AddIntellisense("isrbxactive(<void>)", "Method", "Returns if the Roblox window is in focus.", "getloadedmodules");
            Browser.AddIntellisense("getcallingscript(<void>)", "Method", "Gets the script that is calling this function.", "getcallingscript");
            Browser.AddIntellisense("setnonreplicatedproperty(<Instance> obj, <string> prop, <T> value)", "Method", "Sets the prop property of obj, not replicating to the server. Useful for anticheat bypasses.", "setnonreplicatedproperty");
            Browser.AddIntellisense("getconnections(<Signal> obj)", "Method", "Gets a list of connections to the specified signal. You can then use :Disable and :Enable on the connections to disable/enable them.", "getconnections");
            Browser.AddIntellisense("getspecialinfo(<Instance> obj)", "Method", "Gets a list of special properties for MeshParts, UnionOperations, and Terrain.", "getspecialinfo");
            Browser.AddIntellisense("messagebox(<string> message, <string> title, <int> options)", "Method", "Makes a MessageBox with 'message', 'title', and 'options' as options. See https://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-messagebox for more information.", "messagebox");
            Browser.AddIntellisense("messageboxasync(<string> message, <string> title, <int> options)", "Method", "Makes a MessageBox with 'message', 'title', and 'options' as options. See https://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-messagebox for more information.", "messageboxasync");
            Browser.AddIntellisense("rconsolename(<string> title)", "Method", "Sets the currently allocated console title to 'title'.", "rconsolename");
            Browser.AddIntellisense("rconsoleinput(<void>)", "Method", "Yields until the user inputs information into ther console. Returns the input the put in.", "rconsoleinput");
            Browser.AddIntellisense("rconsoleinputasync(<void>)", "Method", "Yields until the user inputs information into ther console. Returns the input the put in.", "rconsoleinputasync");
            Browser.AddIntellisense("rconsoleprint(<string> message)", "Method", "Prints 'message' into the console.", "rconsoleprint");
            Browser.AddIntellisense("rconsoleinfo(<string> message)", "Method", "Prints 'message' into the console, with a info text before it.", "rconsoleinfo");
            Browser.AddIntellisense("rconsolewarn(<string> message)", "Method", "Prints 'message' into the console, with a warning text before it.", "rconsolewarn");
            Browser.AddIntellisense("rconsoleerr(<string> message)", "Method", "Prints 'message' into the console, with a error text before it.", "rconsoleerr");
            Browser.AddIntellisense("fireclickdetector(<ClickDetector> detector, <number, nil> distance)", "Method", "Fires click detector 'detector' with 'distance'. If a distance is not provided, it will be 0.", "fireclickdetector");
            Browser.AddIntellisense("firetouchinterest(<Part> part, <TouchTransmitter> transmitter, <number> toggle)", "Method", "Fires touch 'transmitter' with 'part'. Use 0 to toggle it being touched, 1 for it not being toggled.", "firetouchinterest");
            Browser.AddIntellisense("saveinstance(<table> t)", "Method", "Saves the Roblox game into your workspace folder.", "saveinstance");

            Browser.AddIntellisense("syn", "Class", "Synapse X Library", "syn");
            Browser.AddIntellisense("syn.crypt.encrypt(<string> data, <string> key)", "Method", "Encrypt's data with key.", "syn.crypt.encrypt");
            Browser.AddIntellisense("syn.crypt.decrypt(<string> data, <string> key)", "Method", "Decrypt's data with key.", "syn.crypt.decrypt");
            Browser.AddIntellisense("syn.crypt.hash(<string> data)", "Method", "Hashes data.", "syn.crypt.decrypt");
            Browser.AddIntellisense("syn.crypt.base64.encode(<string> data)", "Method", "Encodes data with bas64.", "syn.crypt.base64.encode");
            Browser.AddIntellisense("syn.crypt.base64.decode(<string> data)", "Method", "Decodes data with bas64.", "syn.crypt.base64.encode");
            Browser.AddIntellisense("syn.cache_replace(<Instance> obj, <Instance> t_obj)", "Method", "Replace obj in the cache with t_obj.", "syn.cache_replace");
            Browser.AddIntellisense("syn.cache_invalidate(<Instance> obj)", "Method", "Invalidate obj's cache entry, forcing a recache upon the next lookup.", "syn.invalidate_cache");
            Browser.AddIntellisense("syn.set_thread_identity(<int> n)", "Method", "Sets the current thread identity after a Task Scheduler cycle is performed. (call wait() after invoking this function for the expected results)", "syn.set_thread_identity");
            Browser.AddIntellisense("syn.get_thread_identity(<void>)", "Method", "Returns the current thread identity.", "syn.get_thread_identity");
            Browser.AddIntellisense("syn.is_cached(<Instance> obj)", "Method", "Returns true if the instance is currently cached within the registry.", "syn.is_cached");
            Browser.AddIntellisense("syn.write_clipboard(<string> content)", "Method", "Writes 'content' to the current Windows clipboard.", "syn.write_clipboard");
            Browser.AddIntellisense("mousemoverel(<int> x, <int> y)", "Method", "Moves the mouse cursor relatively to the current mouse position by coordinates 'x' and 'y'.", "mousemoverel");
            Browser.AddIntellisense("syn.cache_replace(<Instance> obj, <Instance> t_obj)", "Method", "Replace obj in the cache with t_obj.", "syn.cache_replace");
            Browser.AddIntellisense("syn.cache_invalidate(<Instance> obj)", "Method", "Invalidate obj's cache entry, forcing a recache upon the next lookup.", "syn.invalidate_cache");
            Browser.AddIntellisense("syn.open_web_socket(<string> name)", "Method", "Open's the Synapse WebSocket with channel name. This function will not exist if the user did not enable WebSocket support in theme.json.", "syn.open_web_socket");

            await Task.Delay(250);
            Dispatcher.Invoke(() => { Browser.Opacity = 1; });
        }
    }
}
