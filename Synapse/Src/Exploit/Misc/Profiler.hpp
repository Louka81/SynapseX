#pragma once
#include <vector>
#include <iomanip>
#include <sstream>

#include "../../Utilities/Utils.hpp"
#include "../../Utilities/Console.hpp"

namespace syn
{
	struct Profiler
	{
		struct ProfileInfo
		{
			std::string Message;
			std::time_t Time{};
		};

		std::vector<ProfileInfo> ProfilerInfo;

		void AddProfile(const std::string &profilerStr)
		{
			if (ProfilerInfo.size() > 50)
				ProfilerInfo.erase(ProfilerInfo.begin());

			DbgConsoleExec(*syn::Console::GetSingleton() << ("[PROFILER OUTPUT]: " + profilerStr + '\n'));

			ProfileInfo Info;
			Info.Message = Base64Encode((byte*) profilerStr.c_str(), profilerStr.length());
			Info.Time = std::time(nullptr);

			ProfilerInfo.push_back(Info);
		}

		std::string DumpProfile()
		{
			std::ostringstream oss;
			for (unsigned i = 0; i < ProfilerInfo.size(); i++)
			{
				const auto PTM = std::localtime(&ProfilerInfo[i].Time);
				char Buffer[32];
				std::strftime(Buffer, 32, "%H:%M:%S", PTM);

				oss << std::to_string(i) << ". " << Base64Decode(ProfilerInfo[i].Message) << " (" << std::string(Buffer) << ")\n";
			}
			return oss.str();
		}

		static Profiler* GetSingleton()
		{
			static Profiler* profiler = nullptr;
			if (profiler == nullptr)
				profiler = new Profiler();

			return profiler; 
		}

	};
}
