
/*
*
*	SYNAPSE X
*	File.:	Resource.hpp
*	Desc.:	Local file resources.
*
*/

#include "Static.hpp"

namespace syn
{
	class Resource
	{
	private:

		std::string	resourceName;
		std::string resourceUri;
		std::wstring resourcePath;
		std::ifstream* resourceIn;
		bool hasUri;
		bool isValid;

	public:

		static std::vector<Resource*>& get_resource_vector()
		{
			static std::vector<Resource*> resourceCache;
			return resourceCache;
		}

		static Resource* lookup(std::string& resName)
		{
			for (Resource* res : get_resource_vector())
				if (res->name() == resName)
					return res;
			return nullptr;
		}

		std::string name() const
		{
			return resourceName;
		}

		std::string uri() const
		{
			return resourceUri;
		}

		std::wstring path() const
		{
			return resourcePath;
		}

		bool open()
		{
			resourceIn = new std::ifstream(path(), std::ios::binary);
			isValid = resourceIn->good();
			return isValid;
		}

		void close()
		{
			if (isValid)
				return resourceIn->close();
			delete resourceIn;
			isValid = false;
		}

		bool exists()
		{
			bool r = open();
			close();
			return r;
		}

		bool remove()
		{
			if (!exists()) return false;
			std::filesystem::remove(resourcePath.c_str());
			return true;
		}

		bool with(std::function<void(Resource*, std::ifstream*)> f)
		{
			bool did_open = open();
			if (!did_open) return did_open;
			f(this, resourceIn);
			close();
			return true;
		}

		bool valid() const
		{
			return isValid;
		}

		bool get()
		{
			if (exists())
				return true;
			if (hasUri)
			{
				auto resp = cpr::Get(cpr::Url{ resourceUri }).text;
				std::ofstream OutFile;
				OutFile.open(resourcePath, std::ios::out | std::ios::binary);
				OutFile.write((char*) resp.c_str(), resp.size());
				OutFile.close();
				return exists();
			}
			return false;
		}

		std::string read()
		{
			if (!valid()) open();
			std::string out_str((std::istreambuf_iterator<char>(*resourceIn)), std::istreambuf_iterator<char>());
			close();
			return out_str;
		}

		Resource(const std::string& in_resourceName, const std::wstring& in_resourcePath)
		{
            resourceIn = NULL;
			resourceName = in_resourceName;
			resourcePath = in_resourcePath;
			hasUri = false;
            isValid = false;
			get_resource_vector().push_back(this);
		}

		Resource(const std::string& in_resourceName, const std::wstring& in_resourcePath, const std::string& in_resourceUri)
		{
            resourceIn = NULL;
			resourceName = in_resourceName;
			resourcePath = in_resourcePath;
			resourceUri = in_resourceUri;
			hasUri = true;
            isValid = false;
			get_resource_vector().push_back(this);
		}
	};
}