
/*
*
*	SYNAPSE X
*	File.:	Static.hpp
*	Desc.:	doing it smart unlike 3ds
*
*/

//ALWAYS INCLUDE THIS FILE AT THE TOP OR SHIT WILL BREAK BECAUSE THE WINDOWS API FUCKING SUCKS

#pragma once
#pragma warning(disable: 4099 4267)

#define SYNAPSE_TITLE	"Synapse X"
#define SYNAPSE_VERSION	"v1.8.1b"
#define SYNAPSE_VSTRING	SYNAPSE_TITLE " " SYNAPSE_VERSION

#define CRYPTOPP_ENABLE_NAMESPACE_WEAK 1

#ifdef _WIN64
#error Synapse only supports x86 - make sure you selected the right configuration!
#endif

#include <Winsock2.h>
#include <Windows.h>
#include <string>
#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include <stack>
#include <istream>
#include <fstream>
#include <sstream>
#include <set>
#include <functional>
#include <TlHelp32.h>
#include <VersionHelpers.h>
#include <Urlmon.h>
#include <ShlObj.h>
#include <psapi.h>

#include <cryptopp/aes.h>
#include <cryptopp/rsa.h>
#include <cryptopp/gcm.h>
#include <cryptopp/eax.h>
#include <cryptopp/md5.h>
#include <cryptopp/sha.h>
#include <cryptopp/sha3.h>
#include <cryptopp/osrng.h>
#include <cryptopp/hex.h>
#include <cryptopp/pssr.h>
#include <cryptopp/base64.h>
#include <cryptopp/modes.h>
#include <cryptopp/filters.h>
#include <cryptopp/serpent.h>
#include <cryptopp/pwdbased.h>

extern "C"
{
	#include "../../Source Dependencies/Lua/lua.h"
	#include "../../Source Dependencies/Lua/lauxlib.h"
	#include "../../Source Dependencies/Lua/lualib.h"
	#include "../../Source Dependencies/Lua/lobject.h"
	#include "../../Source Dependencies/Lua/lstate.h"
	#include "../../Source Dependencies/Lua/lfunc.h"
	#include "../../Source Dependencies/Lua/lopcodes.h"
	#include "../../Source Dependencies/Lua/lstring.h"
	#include "../../Source Dependencies/Lua/ldo.h"
    #include "../../Source Dependencies/Lua/llex.h"
}

#include "Exception.hpp"
#include "cryptopp/cryptlib.h"

#include "themida/ThemidaSDK.h"
#include "themida/SecureEngineCustomVM_FISH_LITE.h"
#include "themida/SecureEngineCustomVM_FISH_LONDON.h"
#include "themida/SecureEngineCustomVM_TIGER_LONDON.h"

#include "../../Exploit/Security/FunctionReader.hpp"
#include "../../Utilities/Obfuscation/ObfuscatedString.hpp"

#include "../../Source Dependencies/json/json.hpp"

#include "Zydis/Zydis.h"

#include "../../Source Dependencies/cpr/cpr.h"

/* turn this on if you want to enable debug console output */
//#define EnableDebugOutput

/* turn this on if you are releasing a beta release */
//#define EnableBetaRelease

/* turn this on for memcheck bypass */
//#define EnableMemCheckBypass

/* turn this on if you want to enable HSVM (memcheck bypass must be enabled also) */
//#define EnableHSVM

/* turn this on if you want to enable HSVM but ONLY on LuaU games (DO NOT enable memcheck bypass with this, also don't use the regular HSVM macro with this.) */
#define EnableHSVMOnlyLuaU

/* turn this on for the Lua U translator. this is so the translator is not accidentally compiled into release builds. */
//#define EnableLuaUTranslator

/* turn this on for the Lua U decompiler. this is so the decompiler is not accidentally compiled into release builds. */
//#define EnableLuaUDecompiler

/* turn this on for SecureLua HSVMs. */
#define EnableSecureLua

#ifdef EnableDebugOutput
#define DbgConsoleExec(x) x
#else
#define DbgConsoleExec(x) __noop;
#endif

#ifdef EnableHSVMOnlyLuaU
#ifdef EnableHSVM
#error Only EnableHSVMOnlyLuaU or EnableHSVM can be defined, not both. 
#endif
#endif

#ifdef EnableHSVM
#ifndef EnableMemCheckBypass
#error EnableMemCheckBypass must be enabled in order to use EnableHSVM.
#endif
#endif

using json = nlohmann::json;

struct SynCClosure
{
	uintptr_t Address;
    uintptr_t ExtraSpace;
};

namespace syn
{
	uintptr_t RobloxBase(uintptr_t ToAdjust);

    typedef BOOL(WINAPI* VirtualProtectFn)(LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect);
    inline VirtualProtectFn SafeVirtualProtect;
    inline DWORD ProcID;
    inline HMODULE Module;
    inline HMODULE RobloxModule;
    inline HWND RobloxWindow;
    inline HANDLE RobloxProcess;
    inline HMODULE ntdll;
    inline HMODULE kernel32;
    inline HMODULE kernelbase;
	inline CRITICAL_SECTION InitSection;

    inline char TrustcheckBuff[1] = { '\0' };

    namespace Static
    {
	    void Initialize();
	    void InitializeWindow();
    }
}