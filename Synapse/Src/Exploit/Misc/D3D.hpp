
/*
*
*	SYNAPSE X
*	File.:	D3D.hpp
*	Desc.:	D3D hook and renderer.
*
*/

#pragma once

#include "Static.hpp"
#include "../../Utilities/Utils.hpp"
#include "../../Source Dependencies/ImGUI/imgui.h"
#include "../../Source Dependencies/ImGUITextEditor/TextEditor.h"

#include <filesystem>
#pragma warning(disable: 26495 4005)
#include <D3D11.h>
#pragma warning(default: 26495 4005)
#undef DrawText

typedef HRESULT(_stdcall *IDXGISwapChainPresentFn)(IDXGISwapChain* pSwapChain, UINT SyncInterval, UINT Flags);

HRESULT __stdcall PresentHook(IDXGISwapChain* pSwapChain, UINT SyncInterval, UINT Flags);
LRESULT __stdcall WndProcHook(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);

extern IDXGISwapChainPresentFn OrigIDXGISwapChainPresent;
extern WNDPROC OrigWndProc;
extern BOOL FPSUnlocked;
extern BOOL IGuiEnabled;
extern bool OutputRedirection;
extern bool AutoScroll;
extern DWORD TaskSched;
extern DWORD TaskSchedDelay;
extern std::vector<std::pair<std::string, ImU32>> ConsoleOutput;

namespace syn
{
	enum D3DTypes
	{
		D3_LINE,
		D3_TEXT,
		D3_SQUARE,
		D3_CIRCLE,
	};

	struct D3DHeader
	{
		BYTE Visible;
		D3DTypes Type;
	};

	struct D3DLine
	{
		ImVec2 From;
		ImVec2 To;
		ImU32 Color{};
		float Thickness{};
	};

	struct D3DSquare
	{
		ImVec2 Pos;
		ImVec2 Size;
		ImU32 Color{};
		float Thickness{};
		BYTE Filled{};
	};

	struct D3DCircle
	{
		ImVec2 Pos;
		float Radius{};
		ImU32 Color{};
		float Thickness{};
		BYTE Filled{};
		DWORD Sides{};
	};

	struct D3DText
	{
		std::string* Text{};
		ImVec2 Pos;
		float Size{};
		ImU32 Font{};
		ImU32 Color{};
		BYTE Center{};
		BYTE Outline{};
		ImU32 OutlineColor{};
	};

	struct D3DObject
	{
		D3DHeader Header;
		DWORD* Ptr;
	};

	class D3D
	{
		std::vector<ImFont*> Fonts;
		inline static wchar_t IniPath[23767]{};

		static bool WriteMemory(void* Addr, const void* Patch, size_t Sz);

		static void* HookVFT(void* Obj, const int Idx, void* Target);

		static DWORD FindTaskScheduler();

		static int FindDelayOffset(DWORD Sched);

		static void SetupFPSUnlocker();
	public:
		std::vector<D3DObject*> RenderChain;

		static std::wstring GetWorkingPath();

		static bool __declspec(noinline) Initialize(bool UnlockFPS = FALSE);

		static D3D* GetSingleton();

		void AddFont(ImFont* _Font);

		ImFont* GetFont(int idx) const;

		void BeginScene() const;

		void DrawScene() const;

		void EndScene();

		void DrawUI() const;

		void AddToRenderList(D3DObject* Object);

		void RemoveFromRenderList(D3DObject* Object);

		float DrawText(ImFont* font, const std::string& text, const ImVec2& pos, float size, ImU32 color, ImU32 ocolor,
		               bool center, bool outline) const;

		static void DrawLine(const ImVec2& from, const ImVec2& to, ImU32 color, float thickness);

		static void DrawBox(const ImVec2& from, const ImVec2& size, ImU32 color, float thickness);

		static void DrawBoxFilled(const ImVec2& from, const ImVec2& size, ImU32 color);

		static void DrawCircle(const ImVec2& position, float radius, ImU32 color, float thickness, int sides);

		static void DrawCircleFilled(const ImVec2& position, float radius, ImU32 color, int sides);
	};
}