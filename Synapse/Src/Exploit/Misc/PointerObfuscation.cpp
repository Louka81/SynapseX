#include "./PointerObfuscation.hpp"

#include "../Execution/RbxLua.hpp"
#include "../../Utilities/Hashing/fnv.hpp"

#include <tuple>

#pragma warning(disable: 4146)

namespace syn::PointerObfuscation
{
    void __fastcall ObfuscateAdd(const uintptr_t Ptr, const uintptr_t Val) { *(uintptr_t*)Ptr = Ptr + Val; }
    void __fastcall ObfuscateXor(const uintptr_t Ptr, const uintptr_t Val) { *(uintptr_t*)Ptr = Ptr ^ Val; }
    void __fastcall ObfuscateSubLeft(const uintptr_t Ptr, const uintptr_t Val) { *(uintptr_t*)Ptr = Val - Ptr; }
    void __fastcall ObfuscateSubRight(const uintptr_t Ptr, const uintptr_t Val) { *(uintptr_t*)Ptr = Ptr - Val; }
    void __fastcall ObfuscateNone(const uintptr_t Ptr, const uintptr_t Val) { *(uintptr_t*)Ptr = Ptr + Val; } /* Flag only*/
    void __fastcall ObfuscateInv(const uintptr_t Ptr, const uintptr_t Val) { *(uintptr_t*)Ptr = -(Ptr + Val); } /* Flag only*/

    uintptr_t __fastcall DeObfuscateAdd(const uintptr_t Ptr) { return *(uintptr_t*)Ptr - Ptr; }
    uintptr_t __fastcall DeObfuscateXor(const uintptr_t Ptr) { return Ptr ^ *(uintptr_t*)Ptr; }
    uintptr_t __fastcall DeObfuscateSubLeft(const uintptr_t Ptr) { return Ptr + *(uintptr_t*)Ptr; }
    uintptr_t __fastcall DeObfuscateSubRight(const uintptr_t Ptr) { return Ptr - *(uintptr_t*)Ptr; }

    std::tuple<Obf, DeObf> GetObfFunctions(PtrObfuscationEnum ObfType)
    {
        switch (ObfType)
        {
            case ADD:
                return std::make_tuple(ObfuscateAdd, DeObfuscateAdd);
            case XOR:
                return std::make_tuple(ObfuscateXor, DeObfuscateXor);
            case SUBLEFT:
                return std::make_tuple(ObfuscateSubLeft, DeObfuscateSubLeft);
            case SUBRIGHT:
                return std::make_tuple(ObfuscateSubRight, DeObfuscateSubRight);
            /* Flag Only */
            case NONE:
                return std::make_tuple(ObfuscateNone, (DeObf)NULL);
            case INV:
                return std::make_tuple(ObfuscateInv, (DeObf)NULL);
            default:
                __assume(false); /* Things wont work anyway */
        }

        return std::tuple<Obf, DeObf>(NULL, NULL);
    }

    void SetObfFunctions(uintptr_t binhash, Obf& obf, DeObf& deobf)
    {
        std::tuple<Obf, DeObf> tuple = GetObfFunctions((PtrObfuscationEnum)syn::RbxLua::GetBinValue(binhash));

        obf = std::get<0>(tuple);
        deobf = std::get<1>(tuple);
    }

    void Initialize()
    {
        VM_MUTATE_ONLY_START;

        SetObfFunctions(FNVA1_CONSTEXPR("OF_proto"), ObfuscateProto, DeObfuscateProto);
        SetObfFunctions(FNVA1_CONSTEXPR("OF_lclosure"), ObfuscateLClosure, DeObfuscateLClosure);
        SetObfFunctions(FNVA1_CONSTEXPR("OF_savedpc"), ObfuscateSavedPC, DeObfuscateSavedPC);
        SetObfFunctions(FNVA1_CONSTEXPR("OF_globalstate"), ObfuscateGlobalState, DeObfuscateGlobalState);
        SetObfFunctions(FNVA1_CONSTEXPR("OF_scriptstate"), ObfuscateScriptState, DeObfuscateScriptState);
        SetObfFunctions(FNVA1_CONSTEXPR("OF_stringlen"), ObfuscateStringLen, DeObfuscateStringLen);
        SetObfFunctions(FNVA1_CONSTEXPR("OF_cclosure"), ObfuscateCClosure, DeObfuscateCClosure);
        SetObfFunctions(FNVA1_CONSTEXPR("OF_ckey"), ObfuscateCKey, DeObfuscateCKey);
        SetObfFunctions(FNVA1_CONSTEXPR("OF_flag"), ObfuscateFlag, DeObfuscateFlag);
        SetObfFunctions(FNVA1_CONSTEXPR("OF_mus"), ObfuscateMemGlobal, DeObfuscateMemGlobal);
        SetObfFunctions(FNVA1_CONSTEXPR("OF_mus2"), ObfuscateMemHash, DeObfuscateMemHash);
        SetObfFunctions(FNVA1_CONSTEXPR("OF_mus3"), ObfuscateMemHasher, DeObfuscateMemHasher);

        VM_MUTATE_ONLY_END;
    }
}
