
/*
 *	lorraine — LuaU compiler and analyser, written for Synapse X by Louka & Eternal
 *	Lexer
 */

#include "lorraine_across.hpp"
#include "lorraine_llex.hpp"

struct i_lorraine_token_map_entry
{
	std::wstring token_name;
	lorraine::uint token_id;
};

lorraine::lorraine_lexer_gearbox* lorraine::lorraine_lexer_gearbox::initialize_default_gearbox()
{
	/* to-do: obfuscate this */
	lorraine_lexer_gearbox* gearbox = new lorraine_lexer_gearbox;

	/* i know it LOOKS like there's a faster way to do this, but there isn't one.
	 * there's no way to properly order this in a map, array or likewise due to the
	 * op/tk separation (string compares would make this function slower, or adding
	 * an extra field would take up more memory), there's no way to generate the
	 * strings (avoiding arrays) without taking up more memory/more time, etc. this
	 * code looks like hot steaming garbage but its the fastest we can do it
	 * 
	 * i say caching gearbox::lang_usermap would remove an additional pointer deref
	 * but msvc already optimizes it out so /shrug
	 */

	/* keywords */
	gearbox->lang_usermap[L"TK_AND"] = gearbox->add_keyword(L"and");
	gearbox->lang_usermap[L"TK_BREAK"] = gearbox->add_keyword(L"break");
	gearbox->lang_usermap[L"TK_DO"] = gearbox->add_keyword(L"do");
	gearbox->lang_usermap[L"TK_ELSE"] = gearbox->add_keyword(L"else");
	gearbox->lang_usermap[L"TK_ELSEIF"] = gearbox->add_keyword(L"elseif");
	gearbox->lang_usermap[L"TK_END"] = gearbox->add_keyword(L"end");
	gearbox->lang_usermap[L"TK_FALSE"] = gearbox->add_keyword(L"false");
	gearbox->lang_usermap[L"TK_FOR"] = gearbox->add_keyword(L"for");
	gearbox->lang_usermap[L"TK_FUNCTION"] = gearbox->add_keyword(L"function");
	gearbox->lang_usermap[L"TK_IF"] = gearbox->add_keyword(L"if");
	gearbox->lang_usermap[L"TK_IN"] = gearbox->add_keyword(L"in");
	gearbox->lang_usermap[L"TK_LOCAL"] = gearbox->add_keyword(L"local");
	gearbox->lang_usermap[L"TK_NIL"] = gearbox->add_keyword(L"nil");
	gearbox->lang_usermap[L"TK_NOT"] = gearbox->add_keyword(L"not");
	gearbox->lang_usermap[L"TK_OR"] = gearbox->add_keyword(L"or");
	gearbox->lang_usermap[L"TK_REPEAT"] = gearbox->add_keyword(L"repeat");
	gearbox->lang_usermap[L"TK_RETURN"] = gearbox->add_keyword(L"return");
	gearbox->lang_usermap[L"TK_THEN"] = gearbox->add_keyword(L"then");
	gearbox->lang_usermap[L"TK_TRUE"] = gearbox->add_keyword(L"true");
	gearbox->lang_usermap[L"TK_UNTIL"] = gearbox->add_keyword(L"until");
	gearbox->lang_usermap[L"TK_WHILE"] = gearbox->add_keyword(L"while");

	/* operators */
	gearbox->lang_usermap[L"OP_ADD"] = gearbox->add_operator(L"+");
	gearbox->lang_usermap[L"OP_SUB"] = gearbox->add_operator(L"-");
	gearbox->lang_usermap[L"OP_MUL"] = gearbox->add_operator(L"*");
	gearbox->lang_usermap[L"OP_DIV"] = gearbox->add_operator(L"/");
	gearbox->lang_usermap[L"OP_MOD"] = gearbox->add_operator(L"%");
	gearbox->lang_usermap[L"OP_POW"] = gearbox->add_operator(L"^");
	gearbox->lang_usermap[L"OP_LEN"] = gearbox->add_operator(L"#");
	gearbox->lang_usermap[L"OP_EQ"] = gearbox->add_operator(L"==");
	gearbox->lang_usermap[L"OP_NEQ"] = gearbox->add_operator(L"!=");
	gearbox->lang_usermap[L"OP_LE"] = gearbox->add_operator(L"<=");
	gearbox->lang_usermap[L"OP_GE"] = gearbox->add_operator(L">=");
	gearbox->lang_usermap[L"OP_LT"] = gearbox->add_operator(L"<");
	gearbox->lang_usermap[L"OP_BT"] = gearbox->add_operator(L">");
	// gearbox->lang_usermap[L"OP_BLT"] = gearbox->add_operator(L"bacon lettuce tomato");
	gearbox->lang_usermap[L"OP_ASS"] = gearbox->add_operator(L"="); // shut up
	gearbox->lang_usermap[L"OP_LP"] = gearbox->add_operator(L"(");
	gearbox->lang_usermap[L"OP_RP"] = gearbox->add_operator(L")");
	gearbox->lang_usermap[L"OP_LB"] = gearbox->add_operator(L"{");
	gearbox->lang_usermap[L"OP_RB"] = gearbox->add_operator(L"}");
	gearbox->lang_usermap[L"OP_LS"] = gearbox->add_operator(L"[");
	gearbox->lang_usermap[L"OP_RS"] = gearbox->add_operator(L"]");
	gearbox->lang_usermap[L"OP_SEM"] = gearbox->add_operator(L";");
	gearbox->lang_usermap[L"OP_COL"] = gearbox->add_operator(L":");
	gearbox->lang_usermap[L"OP_COM"] = gearbox->add_operator(L",");
	gearbox->lang_usermap[L"OP_DOT"] = gearbox->add_operator(L".");
	gearbox->lang_usermap[L"OP_CON"] = gearbox->add_operator(L"..");
	gearbox->lang_usermap[L"OP_PER"] = gearbox->add_operator(L"...");

	return gearbox;
}
