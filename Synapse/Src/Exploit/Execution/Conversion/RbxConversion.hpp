
/*
*
*	SYNAPSE X
*	File.:	RbxConversion.hpp
*	Desc.:	Proto conversion for Synapse
*	Notes:  EB 33 57 E8 = readProto
*
*/

#pragma once
#include "../../Misc/Static.hpp"
#include "../../Misc/Structures.hpp"
#include "../../../Utilities/Obfuscation/ObfuscatedNumber.hpp"

#include "RbxOp.hpp"
#include "../RbxLua.hpp"

namespace syn
{
	extern int LastDefineKey;

	enum HSvmVMs
	{
		SECURELUA_VM_NONE,
		SECURELUA_VM_MARKED,
		SECURELUA_VM_MINIMAL,
		SECURELUA_VM_LOW,
		SECURELUA_VM_MEDIUM,
		SECURELUA_VM_HIGH
	};

	struct HSvmSettings
	{
		HSvmVMs VM;
		uint32_t MulInvKey;
		TValue* ShadowK;
	};

	class LuaTranslator
	{
		InstructionTranslator* InstTranslator;
		DWORD EK;

	public:
		DWORD DK;
		static Structures::rProto* CreateProto(RbxLua RS, lua_State* L, DWORD SrcPtr);

		void ConvertConstant(RbxLua RS, TValue* LVal, TValue* RVal) const;

		DWORD __declspec(noinline) ConvertProto(RbxLua RS, lua_State* L, Proto* LP, const std::string& Source = "");

		static TString* DumpString(RbxLua RS, lua_State* LS, TString* Str);

		void DumpCode(RbxLua RS, Proto* P, DWORD* RCode) const;

		void DumpConstant(RbxLua RS, lua_State* LS, TValue* LVal, TValue* RVal) const;

		__declspec(noinline) Proto* DumpProto(RbxLua RS, lua_State* LS, DWORD P) const;

		void ConvertInCurrentThread(RbxLua RL, const std::string& Script, std::uint8_t ScriptMode, std::string* ChunkName = nullptr);

		RbxLua Convert(RbxLua RS, const std::string& Script, std::uint8_t ScriptMode, std::string* ChunkName = nullptr);

		static int __cdecl DumpWriter(lua_State* L, const void* b, size_t size, void* B);

		std::string Dump(RbxLua RS, bool Strip = false) const;

		Proto* DumpToProto(lua_State* NState, RbxLua RS) const;

		Closure* DumpToFunc(lua_State* NState, RbxLua RS) const;

		static void CloneConstant(RbxLua RL, TValue* Constants, int Index);

		static TValue* GetConstantsPointer(RbxLua RS, int index, int& sizek);

		static TString** GetUpvaluesPointer(RbxLua RS, int index, int& sizeupvalues);

		static BOOL GetSynapseMarked(RbxLua RS, int index);

		static HSvmSettings* GetHsvmSettings(RbxLua RS, int index);

		static LuaTranslator* GetSingleton();

		void SetDecodeKey(DWORD Decode);
	};
}
