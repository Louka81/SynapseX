
/*
*
*	SYNAPSE X
*	File.:	SysHook.hpp
*	Desc.:	Wow64 syscall hooking library.
*
*/

#pragma once
#include "../Misc/Static.hpp"

namespace syn::SysHook
{
	class ProtectedMemory
	{
		struct ProtectedRegion
		{
			uintptr_t Base;
			uintptr_t End;
		};

		std::vector<ProtectedRegion> Protected;

	public:
		static ProtectedMemory* GetSingleton()
		{
			static ProtectedMemory* pm = nullptr;
			if (pm == nullptr)
				pm = new ProtectedMemory();
			return pm;
		}

		bool IsProtected(uintptr_t Addr)
		{
			for (const auto Region : Protected)
			{
				if (Addr >= Region.Base && Region.End >= Addr)
					return true;
			}

			return false;
		}

		void Add(uintptr_t Base, size_t Size)
		{
			ProtectedRegion Region{};
			Region.Base = Base;
			Region.End = Base + Size;

			Protected.push_back(Region);
		}
	};

	bool Setup(BOOL AutoLaunch);
	uintptr_t Hook(uintptr_t NtFunc, uintptr_t To);
}