
/*
*
*	SYNAPSE X
*	File.:	PEBUnlink.hpp
*	Desc.:	Unlinks our module from the PEB.
*
*/

#pragma once
#include "../Misc/Static.hpp"

#include <winternl.h>

typedef struct LDR_MODULE {
    LIST_ENTRY InLoadOrderModuleList;
    LIST_ENTRY InMemoryOrderModuleList;
    LIST_ENTRY InInitializationOrderModuleList;
    PVOID BaseAddress;
    PVOID EntryPoint;
    ULONG SizeOfImage;
    UNICODE_STRING FullDllName;
    UNICODE_STRING BaseDllName;
    ULONG Flags;
    SHORT LoadCount;
    SHORT TlsIndex;
    LIST_ENTRY HashTableEntry;
    ULONG TimeDateStamp;
} LDR_MODULE, *PLDR_MODULE;

#define UNLINK(x)					\
	(x).Flink->Blink = (x).Blink;	\
	(x).Blink->Flink = (x).Flink;


/* TODO: Merge security files */
inline PLDR_MODULE GetLoadOrderModuleList()
{
#ifdef _WIN64
    uintptr_t pPEB = (uintptr_t)__readgsqword(0x60);
    constexpr uint8_t LoaderDataOff = 0x18;
    constexpr uint8_t InLoadOrderModuleList = 0x10;
#else
    uintptr_t pPEB = (uintptr_t)__readfsdword(0x30);
    constexpr uint8_t LoaderDataOff = 0xC;
    constexpr uint8_t InLoadOrderModuleList = 0xC;
#endif

    /* PEB->LoaderData->InLoadOrderModuleList */
    return (PLDR_MODULE)(*(uintptr_t*)(pPEB + LoaderDataOff) + InLoadOrderModuleList);
}

inline void UnlinkModuleFromPEB(HMODULE hModule)
{
    PLDR_MODULE StartEntry = GetLoadOrderModuleList();
    PLDR_MODULE CurrentEntry = (PLDR_MODULE) StartEntry->InLoadOrderModuleList.Flink;

	while (StartEntry != CurrentEntry && CurrentEntry != NULL)
	{
		if (CurrentEntry->BaseAddress == hModule)
		{
			UNLINK(CurrentEntry->InLoadOrderModuleList);
			UNLINK(CurrentEntry->InMemoryOrderModuleList);
			UNLINK(CurrentEntry->InInitializationOrderModuleList);
			UNLINK(CurrentEntry->HashTableEntry);

			break;
		}

        CurrentEntry = (PLDR_MODULE)CurrentEntry->InLoadOrderModuleList.Flink;
	}
}