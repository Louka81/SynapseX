#include "./AntiTamper.hpp"

#include <DbgHelp.h>
#include "../Execution/RbxApi.hpp"

namespace syn::AntiTamper
{
    std::vector<SecHash32> Hashes32;
    std::vector<SecHash64> Hashes64;

    uint32_t Master32;
    uint64_t Master64;

    uint32_t MasterHash32 = 0;
    uint64_t MasterHash64 = 0;

    uint32_t Counter32;
    uint32_t Counter64;

    bool Setup()
    {
#ifndef _DEBUG
        VM_FISH_LITE_START;
        Master32 = RandomInteger(1, UINT_MAX) + 1;
        Master64 = RandomInteger(1, UINT_MAX) * __rdtsc() + 1;

        uintptr_t ModuleBase = reinterpret_cast<uintptr_t>(syn::Module);
        PIMAGE_NT_HEADERS NTHeader = ImageNtHeader(syn::Module);
        PIMAGE_SECTION_HEADER SectionHeader = reinterpret_cast<PIMAGE_SECTION_HEADER>(NTHeader + 1);

        VM_FISH_LITE_END;

        XXH32_state_t* MasterState32 = HashInit32(Master32);
        XXH64_state_t* MasterState64 = HashInit64(Master64);

        for (auto i = 0; i < NTHeader->FileHeader.NumberOfSections; i++)
        {
            VM_FISH_LITE_START;
            MEMORY_BASIC_INFORMATION MBI{};
            if (!VirtualQuery((LPVOID)(ModuleBase + SectionHeader->VirtualAddress), &MBI, sizeof(MBI))) continue;
            if (MBI.Protect == PAGE_READWRITE && MBI.Protect != PAGE_READONLY) continue;
            VM_FISH_LITE_END;

            SecHash32 Hash32{};
            SecHash64 Hash64{};

            VM_FISH_LITE_START;
            Hash32.Location = ModuleBase + SectionHeader->VirtualAddress;
            Hash32.Size = SectionHeader->Misc.VirtualSize;
            Hash32.Nonce = RandomInteger(1, UINT_MAX) + 1;
            VM_FISH_LITE_END;

            /* Main 32 bit segment hash */
            Hash32.Hash = HashRegion32(Hash32.Location, Hash32.Size, Hash32.Nonce * Master32);

            VM_FISH_LITE_START;
            HashFeed32(MasterState32, (uintptr_t)&Hash32, sizeof(SecHash32));
            Hashes32.push_back(Hash32);

            Hash64.Location = ModuleBase + SectionHeader->VirtualAddress;
            Hash64.Size = SectionHeader->Misc.VirtualSize;
            Hash64.Nonce = RandomInteger(1, UINT_MAX) * __rdtsc() + 1;
            VM_FISH_LITE_END;

            /* Main 64 bit segment hash*/
            Hash64.Hash = HashRegion64(Hash64.Location, Hash64.Size, Hash64.Nonce * Master64);

            VM_FISH_LITE_START;
            HashFeed64(MasterState64, (uintptr_t)& Hash64, sizeof(SecHash64));
            Hashes64.push_back(Hash64);

            SectionHeader++;
            VM_FISH_LITE_END;
        }

        MasterHash32 = HashDigest32(MasterState32);
        MasterHash64 = HashDigest64(MasterState64);
#endif

        return true;
    }
}
